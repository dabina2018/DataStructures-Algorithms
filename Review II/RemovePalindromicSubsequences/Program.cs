using System;
using System.Collections.Generic;

namespace RemovePalindromicSubsequences
{
    class Program
    {
        //You are given a string s consisting only of letters 'a' and 'b'.
        //In a single step you can remove one palindromic subsequence from s.
        // Return the minimum number of steps to make the given string empty.
        //A string is a subsequence of a given string if it is generated by deleting
        //some characters of a given string without changing its order.
        //Note that a subsequence does not necessarily need to be contiguous.
        //A string is called palindrome if is one that reads the same backward as well as forward.
        static void Main()
        {
            //Console.WriteLine(RemovePalindromeSub("ababa"));
            //Console.WriteLine(RemovePalindromeSub("abb"));
            //Console.WriteLine(RemovePalindromeSub("baabb"));
            Console.WriteLine(PalindromeSolutionII.removePalindromeSub("baabb"));
        }
        //public static int counter = 0;
        public static int RemovePalindromeSub(string s)
        {
            int counter = 0;
            string tmp = s;
            int i = 0; int j = s.Length - 1;
            int mid = s.Length / 2;
            
            while (i <= j)
            {
                if (tmp == null)
                {
                    return counter;
                }
                if (tmp.Length == 1)
                {
                    counter++;
                    break;
                }
                tmp = Helper(s, mid);
                counter++;
                j = tmp.Length - 1;
                i = 0;
                mid = tmp.Length / 2;
            }
            return counter;
        }
        public static string Helper(string substr, int mid)
        {
            //int counter = 0;
            //bool rtr = false;
            int rt = mid;
            int lt = mid;
            
            while (lt > 0 && rt < substr.Length -1)
            {
                if (substr[rt+1] == substr[lt -1])
                {
                    rt += 1;
                    lt -= 1;
                    //rtr = true;
                }
                else
                {
                    if (substr[mid] == substr[rt + 1])
                    {
                        rt += 1;
                    }
                    else if (substr[mid] == substr[lt - 1])
                    {
                        lt -= 1;
                    }
                }
            }
            if (lt == 0 && rt == substr.Length-1)
            {
                return "";
            }
            else if(lt == 0)
            {
                return substr.Remove(lt + 1);
            }
            else
            {
                return substr.Remove(rt-1);
            }
        }
    }
}

//input: "ababa"       output: 1 ~ s is laready a planidrome, entire string can be removed in one step
//input: "abb"         output: 2 ~ "a" is one "bb" is two
//input: :baabb"       output: 2 ~ "baab" is one "b" is two


