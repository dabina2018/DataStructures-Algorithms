using System;
using System.Collections.Generic;

namespace RemovePalindromicSubsequences
{
    class Program
    {
        //You are given a string s consisting only of letters 'a' and 'b'.
        //In a single step you can remove one palindromic subsequence from s.
        // Return the minimum number of steps to make the given string empty.
        //A string is a subsequence of a given string if it is generated by deleting
        //some characters of a given string without changing its order.
        //Note that a subsequence does not necessarily need to be contiguous.
        //A string is called palindrome if is one that reads the same backward as well as forward.
        static void Main()
        {
            Console.WriteLine(RemovePalindromeSub("ababa"));
            Console.WriteLine(RemovePalindromeSub("abb"));
            Console.WriteLine(RemovePalindromeSub("baabb"));
        }
        public static int RemovePalindromeSub(string s)
        {
            int counter = 0;
            int i = 0; int j = s.Length -1;
            while (i <= j)
            {
                if (s[i] == s[j])
                {
                    bool IsPal = Helper(s.Substring(i, j+1));
                    if (IsPal == true)
                    {
                        counter++;
                        i = j + 1;
                        j = s.Length-1;
                    }
                }                
                else
                {
                    j--;
                }
            }

            return counter;
        }
        public static bool Helper(string substr)
        {
            int i = 0; int j = substr.Length - 1;
            bool rtr = true;
            if (substr.Length == 1)
            {
                return true;
            }
            while (i <= j)
            {
                if (substr[i] == substr[j])
                {
                    rtr = true;
                    i++; j--;
                }
                else return false;
            }
            return rtr;
        }
    }
}

//input: "ababa"       output: 1 ~ s is laready a planidrome, entire string can be removed in one step
//input: "abb"         output: 2 ~ "a" is one "bb" is two
//input: :baabb"       output: 2 ~ "baab" is one "b" is two


